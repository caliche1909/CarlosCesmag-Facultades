{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/caliche1909/CarlosCesmag-Facultades/blob/master/AI_Clasificacion\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import fetch_openml\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "\n",
        "# Paso 1. Cargar el conjunto de datos\n",
        "breast_cancer_wisconsin_original = fetch_openml(data_id=15, as_frame=True)\n",
        "\n",
        "# Data as pandas dataframe\n",
        "X = breast_cancer_wisconsin_original.data\n",
        "y = breast_cancer_wisconsin_original.target\n",
        "\n",
        "# Limpiar datos\n",
        "X_cleaned = X.dropna()\n",
        "y_cleaned = y.loc[X_cleaned.index]\n",
        "\n",
        "# Separar los datos de entrenamiento y test\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.2, random_state=42)\n",
        "\n",
        "# Paso 2. Configurar el clasificador\n",
        "mlp = MLPClassifier(hidden_layer_sizes=(9,), random_state=0)\n",
        "\n",
        "# Paso 3. Entrenar el clasificador\n",
        "mlp.fit(X_train, y_train)\n",
        "\n",
        "# Paso 4. Realizar predicciones\n",
        "y_pred = mlp.predict(X_test)\n",
        "\n",
        "# Paso 5. Calcular accuracy\n",
        "print(f\"El valor de exactitud es: {accuracy_score(y_test, y_pred)}\")\n",
        "\n",
        "# Matriz de confusión\n",
        "matrix = confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(matrix, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicciones')\n",
        "plt.ylabel('Valores Reales')\n",
        "plt.show()\n",
        "\n",
        "# Reporte de clasificación\n",
        "report = classification_report(y_test, y_pred, target_names=['benign', 'malignant'])\n",
        "print(report)\n"
      ],
      "metadata": {
        "id": "pidEXxAWBsQk",
        "outputId": "408c50e0-8f3b-4c7f-9ba3-3c7dccfb3131",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 712
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/datasets/_openml.py:968: FutureWarning: The default value of `parser` will change from `'liac-arff'` to `'auto'` in 1.4. You can set `parser='auto'` to silence this warning. Therefore, an `ImportError` will be raised from 1.4 if the dataset is dense and pandas is not installed. Note that the pandas parser may return different data types. See the Notes Section in fetch_openml's API doc for details.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El valor de exactitud es: 0.927007299270073\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      benign       0.90      0.99      0.94        79\n",
            "   malignant       0.98      0.84      0.91        58\n",
            "\n",
            "    accuracy                           0.93       137\n",
            "   macro avg       0.94      0.92      0.92       137\n",
            "weighted avg       0.93      0.93      0.93       137\n",
            "\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}